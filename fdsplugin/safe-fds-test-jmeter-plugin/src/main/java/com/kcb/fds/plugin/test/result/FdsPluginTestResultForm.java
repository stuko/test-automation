package com.kcb.fds.plugin.test.result;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Map;

import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import com.google.gson.Gson;
import com.kcb.fds.jmeter.plugin.common.data.FileJsonArrayListQueue;
import com.kcb.fds.jmeter.plugin.common.util.TestPluginConstants;
import com.kcb.fds.jmeter.plugin.common.util.HttpUtil;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.ResultSetMetaData;
import java.time.Duration;
import java.util.Collections;
import java.util.HashMap;
import java.util.Properties;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Stream;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author O218001_D
 */
public class FdsPluginTestResultForm extends javax.swing.JFrame {

    static Logger logger = LoggerFactory.getLogger(FdsPluginTestResultForm.class);
    Executor executor = Executors.newFixedThreadPool(3);
    FileJsonArrayListQueue test_result_queue;
    FileJsonArrayListQueue test_expect_queue;
    String[] test_result_factor;
    Gson gson = new Gson();
    boolean cancel_fetch_result;
    boolean cancel_fetch_expect;
    AtomicBoolean cancel_fetch_find = new AtomicBoolean(false);
    
    /**
     * Creates new form fdspluginform
     */
    public FdsPluginTestResultForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {50};
        jPanel1Layout.rowHeights = new int[] {50};
        jPanel1Layout.columnWeights = new double[] {1.0};
        jPanel1Layout.rowWeights = new double[] {1.0};
        jPanel1.setLayout(jPanel1Layout);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Test Result and Report");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 51, 0));
        jLabel1.setText("Test Result Source Info.");

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 51, 0));
        jLabel2.setText("Expected Result Source Info.");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("{    \"jdbc_url\" : \"jdbc:postgresql://192.168.57.251:5413/rhea\",    \"jdbc_driver\" : \"org.postgresql.Driver\",    \"id\" : \"safe\",    \"pw\" : \"kcb1234!\",    \"sql\" : \"select * from   sf_tx_alt\" }");
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel3.setText("Data Location");

        jTextField1.setText("column1,column2,column3,column4");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField1InputMethodTextChanged(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField1PropertyChange(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel4.setText("Factor Names");

        jLabel5.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel5.setText("Data Location");

        jLabel6.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel6.setText("Factor Names");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("{    \"jdbc_url\" : \"jdbc:postgresql://192.168.57.251:5413/rhea\",    \"jdbc_driver\" : \"org.postgresql.Driver\",    \"id\" : \"safe\",    \"pw\" : \"kcb1234!\",    \"sql\" : \"select * from   sf_tx_alt\" }");
        jScrollPane2.setViewportView(jTextArea2);

        jTextField2.setText("column1,column2,column3,column4");
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        jComboBox1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jComboBox1ComponentShown(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel7.setText("Test Result Factor");

        jLabel8.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel8.setText("Logic");

        jLabel9.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel9.setText("Expected Factor");

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Result Value", "Expect Result Value", "Pass"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setText("FIND");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Result", "Logic", "Expected Result"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jButton3.setText("REMOVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 0));
        jLabel10.setText("Test Result Report's Rule");

        jLabel11.setForeground(new java.awt.Color(51, 0, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("0");

        jLabel12.setForeground(new java.awt.Color(51, 0, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("0");

        jLabel13.setForeground(new java.awt.Color(51, 0, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("0");

        jButton4.setText("Fetch");
        jButton4.setName(""); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Fetch");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel14.setText("건");

        jLabel15.setText("건");

        jLabel16.setText("건");

        jLabel17.setForeground(java.awt.Color.red);
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("0");

        jLabel18.setText("건");

        jLabel19.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel19.setText("FAILED");

        jLabel20.setFont(new java.awt.Font("맑은 고딕", 1, 10)); // NOI18N
        jLabel20.setText("PASSED");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Result Value", "Expect Result Value", "Fail"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable3);

        jButton6.setText("Cancel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Cancel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Cancel");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Clear");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Clear");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Clear");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addGap(4, 4, 4)
                                .addComponent(jButton9)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(jLabel9)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel11)
                    .addComponent(jButton4)
                    .addComponent(jLabel14)
                    .addComponent(jButton6)
                    .addComponent(jButton9))
                .addGap(3, 3, 3)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel12)
                    .addComponent(jButton5)
                    .addComponent(jLabel15)
                    .addComponent(jButton7)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel13)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton8)
                            .addComponent(jButton11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refresh_combox() {
        this.jComboBox1.removeAllItems();
        this.refresh_combox(this.jComboBox1, this.jTextField1);
        this.jComboBox3.removeAllItems();
        this.refresh_combox(this.jComboBox3, this.jTextField2);
        this.jComboBox2.removeAllItems();
        this.jComboBox2.addItem(TestPluginConstants.eq);
        this.jComboBox2.addItem(TestPluginConstants.lt);
        this.jComboBox2.addItem(TestPluginConstants.gt);
        this.jComboBox2.addItem(TestPluginConstants.ne);
        this.jComboBox2.addItem(TestPluginConstants.lte);
        this.jComboBox2.addItem(TestPluginConstants.gte);
        this.jComboBox2.addItem(TestPluginConstants.like);
    }

    private void refresh_combox(JComboBox combo_box, JTextField text_field) {
        String factor_columns = text_field.getText();
        if (factor_columns != null && !factor_columns.equals("")) {
            String[] factor_column = factor_columns.split(",");
            if (factor_column.length > 0) {
                for (String f : factor_column) {
                    combo_box.addItem(f);
                }
            }
        }
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel) this.jTable1.getModel();
        tm.addRow(new Object[]{this.jComboBox1.getItemAt(this.jComboBox1.getSelectedIndex()),
            this.jComboBox2.getItemAt(this.jComboBox2.getSelectedIndex()),
            this.jComboBox3.getItemAt(this.jComboBox3.getSelectedIndex())});
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel tm = (DefaultTableModel) this.jTable1.getModel();
            if(tm.getRowCount() == 0){
                JOptionPane.showMessageDialog(null, "비교할 조건을 추가해 주세요.^^");
                return;
            }
            if(this.test_result_queue == null || this.test_result_queue.size() == 0){
                JOptionPane.showMessageDialog(null, "테스트 결과 데이터를 Fetch 해주세요.^^");
                return;
            }
            if(this.test_expect_queue == null || this.test_expect_queue.size() == 0){
                JOptionPane.showMessageDialog(null, "테스트 결과와 비교할 데이터를 Fetch 해주세요.^^");
                return;
            }
            this.cancel_fetch_find.set(false);
            CompletableFuture.runAsync(() -> {
                try {
                    findTestResult();
                } catch (Exception ee) {
                    logger.error(ee.toString(), ee);
                }
            }, executor);
        } catch (Exception e) {
            logger.error(e.toString(), e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jComboBox1ComponentShown
        // TODO add your handling code here: 
    }//GEN-LAST:event_jComboBox1ComponentShown

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        this.refresh_combox();
    }//GEN-LAST:event_formWindowActivated

    private void jTextField1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1PropertyChange

    private void jTextField1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField1InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1InputMethodTextChanged

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
        this.refresh_combox();
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        // TODO add your handling code here:
        this.refresh_combox();
    }//GEN-LAST:event_jTextField2FocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (this.jTable1.getSelectedRow() >= 0) {
            DefaultTableModel tm = (DefaultTableModel) this.jTable1.getModel();
            tm.removeRow(this.jTable1.getSelectedRow());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            this.cancel_fetch_result = false;
            CompletableFuture.runAsync(() -> {
                try {
                    fetchTestResultData();
                } catch (Exception ee) {
                    logger.error(ee.toString(), ee);
                }
            }, executor);
        } catch (Exception e) {
            logger.error(e.toString(), e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            this.cancel_fetch_expect = false;
            CompletableFuture.runAsync(() -> {
                try {
                    fetchTestExpectData();
                } catch (Exception ee) {
                    logger.error(ee.toString(), ee);
                }
            }, executor);
        } catch (Exception e) {
            logger.error(e.toString(), e);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        this.cancel_fetch_result = true;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        this.cancel_fetch_expect = true;
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        this.cancel_fetch_find.set(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        test_result_queue.clear();
        this.setFetchCount(jLabel11,0);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        this.setFetchCount(jLabel12,0);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        this.setFetchCount(jLabel17,0);
        this.setFetchCount(jLabel13,0);
        clearTable();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void setFetchCount(JLabel jlabel, int cnt) {
        jlabel.setText(cnt+ "");
    }

    private void fetchTestResultData() throws Exception {
        String json = this.jTextArea1.getText();
        Map<String, Object> configMap = null;
        try{ configMap = gson.fromJson(json, Map.class); }
        catch(Exception e){logger.error(e.toString(),e);}
        if(configMap == null) {
            configMap = new HashMap<>();
            configMap.put("json","false");
            configMap.put("data",json);
        }
        // 테스트 결과를 저장 할 File queue
        test_result_queue = FileJsonArrayListQueue.getInstanceMap("resultMap", TestPluginConstants.fds_data_path);
        this.fetchData(true, configMap, test_result_queue, jLabel11, jTextField1, jComboBox1);
    }

    private void fetchTestExpectData() throws Exception {
        String json = this.jTextArea2.getText();
        Map<String, Object> configMap = null;
        try{ configMap = gson.fromJson(json, Map.class); }
        catch(Exception e){logger.error(e.toString(),e);}
        if(configMap == null) {
            configMap = new HashMap<>();
            configMap.put("json","false");
            configMap.put("data",json);
        }
        // 테스트 결과를 저장 할 File queue
        test_expect_queue = FileJsonArrayListQueue.getInstanceMap("expectMap", TestPluginConstants.fds_data_path);
        test_expect_queue.setUnlimitMax();
        this.fetchData(false, configMap, test_expect_queue, jLabel12, jTextField2, jComboBox3);
    }

    private void fetchData(boolean isResult, Map<String, Object> configMap, FileJsonArrayListQueue queue, JLabel label, JTextField field, JComboBox combo) throws Exception {
        int data_count = 0;
        if (configMap.containsKey("jdbc_url")
                && configMap.containsKey("jdbc_driver")
                && configMap.containsKey("id")
                && configMap.containsKey("pw")
                && configMap.containsKey("sql")) {
            // SQL
            Class.forName(configMap.get("jdbc_driver") + "");
            try (Connection conn = DriverManager.getConnection(configMap.get("jdbc_url") + "", configMap.get("id") + "", configMap.get("pw") + "");  Statement stmt = conn.createStatement();  ResultSet rs = stmt.executeQuery(configMap.get("sql") + "");) {
                    while (((isResult && !cancel_fetch_result) || (!isResult && !cancel_fetch_expect)) && rs.next()) {
                    Map<String, String> record = new HashMap<>();

                    ResultSetMetaData rsm = rs.getMetaData();
                    int count = rsm.getColumnCount();

                    if (data_count == 0) {
                        test_result_factor = new String[count];
                        for (int i = 1; i <= count; i++) {
                            test_result_factor[i - 1] = rsm.getColumnLabel(i);
                        }
                        setTestFieldsFromArrays(field, combo);
                    }

                    for (int i = 1; i <= count; i++) {
                        String name = rsm.getColumnLabel(i);
                        String value = rs.getString(name);
                        record.put(name, value);
                    }
                    this.setFetchCount(label, ++data_count);
                    queue.add(record);
                }
            } catch (Exception e) {
                logger.error(e.toString(), e);
            }
        } else if (configMap.containsKey("server")
                && configMap.containsKey("topic")) {
            // KAFKA
            Properties props = new Properties();
            props.put(ConsumerConfig.GROUP_ID_CONFIG, "consumer_group_" + configMap.get("topic"));
            props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, configMap.get("server") + "");
            try ( KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);) {
                consumer.subscribe(Collections.singletonList(configMap.get("topic") + ""));
                while (((isResult && !cancel_fetch_result) || (!isResult && !cancel_fetch_expect))) {  // 계속 loop를 돌면서 producer의 message를 띄운다.
                    ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
                    for (ConsumerRecord<String, String> record : records) {
                        String data = record.value();
                        this.setFetchCount(label, ++data_count);
                        Map<String,String> map = gson.fromJson(data, Map.class);
                        queue.add(map);
                        if (data_count == 0) {
                            setTestFieldsFromJson(data, field, combo);
                        }
                    }
                    consumer.commitSync();
                }
            } catch (Exception ex) {
                logger.error(ex.toString(), ex);
            }
        } else if (configMap.containsKey("file_path")) {
            // FILE
            try (
                     FileReader fr = new FileReader(new File(configMap.get("file_path") + ""));  BufferedReader br = new BufferedReader(fr);) {
                String data = null;
                while (((isResult && !cancel_fetch_result) || (!isResult && !cancel_fetch_expect)) && (data = br.readLine()) != null) {
                    processStringData(data, data_count, queue, field, combo);
                    this.setFetchCount(label, ++data_count);
                }
            } catch (Exception e) {
                logger.error(e.toString(), e);
            }
        } else if (configMap.containsKey("url")) {
            // REST
            HttpUtil.call(configMap.get("url") + "", "", (body) -> {
                String[] lines = body.split("\n");
                int count = 0;
                for (String line : lines) {
                    if(((isResult && cancel_fetch_result) || (!isResult && cancel_fetch_expect))) break;
                    count++;
                    processStringData(line, count, queue, field, combo);
                    this.setFetchCount(label, count);
                }
            });
        } else if (configMap.containsKey("json") && "false".equals(configMap.get("json"))){
            // ',' 로 분리된 문자열 , \n으로 구분된 라인
            int count = 0;
            String data = (String)configMap.get("data");
            String[] lines = data.split("[\n]");
            for(String line : lines){
                if(((isResult && cancel_fetch_result) || (!isResult && cancel_fetch_expect))) break;
                    count++;
                    processStringData(line, count, queue, field, combo);
                    this.setFetchCount(label, count);
            }
        } 
    }

    private void processStringData(String data, int data_count, FileJsonArrayListQueue queue, JTextField field, JComboBox combo) {
        if (data.trim().startsWith("{") && data.trim().endsWith("}")) {
            // JSON Type
            Map<String,String> map = gson.fromJson(data, Map.class);
            queue.add(map);
            if (data_count == 0) {
                setTestFieldsFromJson(data, field, combo);
            }
        } else {
            // ',' Saparated or '|' Saparated or '\t' Saparated
            String[] arrays = data.split("\t");
            if (arrays.length <= 1 && data.contains(",")) {
                arrays = data.split("[,]");
            }else if (arrays.length <= 1 && data.contains("|")) {
                arrays = data.split("[|]");
            } 
            this.test_result_factor = field.getText().split("[,]");
            if (this.test_result_factor.length == arrays.length) {
                Map<String, String> m = new HashMap<>();
                for (int i = 0; i < this.test_result_factor.length; i++) {
                    m.put(this.test_result_factor[i], arrays[i]);
                }
                queue.add(m);
                if (data_count == 0) {
                    setTestFieldsFromMap(m, field, combo);
                }
            } else {
                logger.warn("file's field' count is not equals to file contents's count");
            }
        }
    }

    private void setTestFieldsFromJson(String data, JTextField field, JComboBox combo) {
        Map<String, String> m = (Map<String, String>) gson.fromJson(data, Map.class);
        this.setTestFieldsFromMap(m, field, combo);
    }

    private void setTestFieldsFromMap(Map<String, String> m, JTextField field, JComboBox combo) {
        test_result_factor = new String[m.size()];
        m.keySet().toArray(test_result_factor);
        setTestFieldsFromArrays(field, combo);
    }

    private void setTestFieldsFromArrays(JTextField field, JComboBox combo) {
        combo.removeAllItems();
        field.setText(String.join(",", test_result_factor));
        Stream.of(test_result_factor).forEach(s -> combo.addItem(s));
    }
    private void clearTable(){
        DefaultTableModel result_model = (DefaultTableModel) jTable2.getModel();
        result_model.getDataVector().removeAllElements();
        result_model.fireTableDataChanged();
        result_model = (DefaultTableModel) jTable3.getModel();
        result_model.getDataVector().removeAllElements();
        result_model.fireTableDataChanged();
    }
    
    private void findTestResult() {
        logger.error("Start findTestResult");
        jLabel13.setText("0");
        jLabel17.setText("0");
        clearTable();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        AtomicInteger pass = new AtomicInteger();
        AtomicInteger fail = new AtomicInteger();
        String r = null;
        logger.error("Start compare test's result and expected test value");
        // 테스트 데이터 결과 한 건을 읽어옴.
        while(!this.cancel_fetch_find.get() && (r = this.test_result_queue.next()) != null){
            Map<String, String> result = (Map<String, String>) gson.fromJson(r, Map.class);
            logger.error("current row is {}" , r);
            if(this.cancel_fetch_find.get()) break;
            logger.error("cancel_fetch_find is {}" , this.cancel_fetch_find.get());
            int found_count = 0;
            // 테스트 기대 결과 한 건을 읽어옴.
            for(int pos = 1; pos <= this.test_expect_queue.size() && !this.cancel_fetch_find.get() ; pos++) {
                Map<String, String> expect = this.test_expect_queue.get(pos);
                logger.error("current expected row is {} , cancel_fetch_find is {}" , expect , this.cancel_fetch_find.get());
                //  Map<String, String> expect = (Map<String, String>) gson.fromJson(e, Map.class);
                // 테스트 기대 결과 성공 조건 값들을 읽어옴.
                AtomicReference<String> reason = new AtomicReference<>();
                AtomicBoolean find = new AtomicBoolean(true);
                for (int i = 0; i < model.getRowCount(); i++) {
                    String result_name = "";
                    String condition = "";
                    String expect_name = "";
                    String result_value = "";
                    String expect_value = "";
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        if (j == 0) {
                            result_name = (model.getValueAt(i, j) + "").trim();
                        } else if (j == 1) {
                            condition = (model.getValueAt(i, j) + "").trim();
                        } else {
                            expect_name = (model.getValueAt(i, j) + "").trim();
                        }
                        result_value = (result.containsKey(result_name)) ? result.get(result_name) : result_name;
                        expect_value = (expect.containsKey(expect_name)) ? expect.get(expect_name) : expect_name;
                    }
                    reason.set(String.format("%s %s %s", result_value, condition, expect_value));
                    logger.error("compare result = {}" , reason.get());
                    // 기대 결과 중 하나 라도 FALSE가 발견 되면, 실패 , BREAK
                    if (!decide(result_value, condition, expect_value)) {
                        find.set(false);
                        break;
                    }
                }
                
                // 조건을 모두 충족한 경우.
                if (find.get()) {
                    appendFindResult(jTable2, result, reason.get(), "PASSED");
                    jLabel13.setText(pass.incrementAndGet() + "");
                    found_count++;
                }
            }
            if(found_count == 0) {
                appendFindResult(jTable3, result, "" , "FAILED");
                jLabel17.setText(fail.incrementAndGet() + "");
            }
            
        }
    }

    private void appendFindResult(JTable jTable, Map<String, String> result, String expect, String msg) {
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        String[] row = new String[3];
        row[0] = gson.toJson(result);
        row[1] = expect;
        row[2] = msg;
        model.addRow(row);
    }

    private boolean decide(String result, String condition, String expect) {
        logger.info("compare {} {} {}", result, condition, expect);
        if (condition.equals(TestPluginConstants.eq) && result.equals(expect)) {
            return true;
        } else if (condition.equals(TestPluginConstants.ne) && !result.equals(expect)) {
            return true;
        } else if (condition.equals(TestPluginConstants.lt) && Float.parseFloat(result) < Float.parseFloat(expect)) {
            return true;
        } else if (condition.equals(TestPluginConstants.gt) && Float.parseFloat(result) > Float.parseFloat(expect)) {
            return true;
        } else if (condition.equals(TestPluginConstants.lte) && Float.parseFloat(result) <= Float.parseFloat(expect)) {
            return true;
        } else if (condition.equals(TestPluginConstants.gte) && Float.parseFloat(result) >= Float.parseFloat(expect)) {
            return true;
        } else if (condition.equals(TestPluginConstants.like) && result.indexOf(expect) >= 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FdsPluginTestResultForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FdsPluginTestResultForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FdsPluginTestResultForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FdsPluginTestResultForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FdsPluginTestResultForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
