/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

def javaVersion = JavaVersion.VERSION_1_8;
sourceCompatibility = javaVersion;
targetCompatibility = javaVersion;

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    flatDir {
         dirs './local-lib/'
    }
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}

dependencies {
    // Use JUnit Jupiter for testing.
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application. 
    implementation 'com.google.guava:guava:30.1.1-jre'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.1' 

    // https://mvnrepository.com/artifact/org.apache.jmeter/ApacheJMeter_java
    implementation "com.datastax.cassandra:cassandra-driver-core:3.8.0"
    implementation "org.apache.cassandra:cassandra-all:3.11.6" 
    implementation files('./local-lib/com/netflix/0.2-SNAPSHOT/CassJMeter/CassJMeter-0.2-SNAPSHOT.jar')
    // https://mvnrepository.com/artifact/com.netflix.servo/servo-core
	implementation "com.netflix.servo:servo-core:0.13.2"
	// https://mvnrepository.com/artifact/com.netflix.astyanax/astyanax-cassandra
	implementation "com.netflix.astyanax:astyanax-cassandra:3.10.2"
	
    
	implementation 'org.apache.jmeter:ApacheJMeter_java:5.0'
	// implementation fileTree(dir: '../../apache-jmeter-5.4.1/bin/', include: ['ApacheJMeter.jar'])
	// implementation name :'ApacheJMeter'

    implementation "org.apache.jmeter:ApacheJMeter_core:5.0"
    implementation "org.apache.jmeter:ApacheJMeter_components:5.0"
    implementation "com.google.code.gson:gson:2.8.6"
    
    implementation "org.slf4j:slf4j-api:1.7.26"
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    implementation 'org.apache.kafka:kafka-clients:3.0.0'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    // implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.0.0-alpha01'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    // implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
 

    // https://mvnrepository.com/artifact/com.googlecode.juniversalchardet/juniversalchardet
    implementation 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'

    implementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
	implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    
    // testCompile group: 'junit', name: 'junit', version: '4.12'
    // testimplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

} 

application {
    // Define the main class for the application.
    mainClass = 'com.auto.test.plugin.test.result.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.jar {
    archiveFileName.set("test-automation-jmeter-plugin.jar")
}

test{
    exclude '**/*'
    /*
    useJUnitPlatform()
    filter {
        excludeTestsMatching "*TestFileJsonArrayListQueue*"
        excludeTestsMatching "*Security*"
        excludeTestsMatching "*Combination*"
        excludeTestsMatching "*TestCombination*"
        // includeTestsMatching "*Combination*"
    }
    */
}

task copyDependencies(type: Copy) {
    into "$buildDir/dependencies"
    from configurations.implementation
}

task copyAndChangeFile(type: Copy) {
    from 'build/libs/test-automation-jmeter-plugin.jar' 
    into '../../apache-jmeter-5.4.1/lib/ext' 
}

task copyToLib(type: Copy) {
    into "build/output/libs"
    from configurations.runtimeClasspath
}

build.dependsOn(copyToLib)
build.finalizedBy(copyAndChangeFile)